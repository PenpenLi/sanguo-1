//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WorldMapWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WorldMap), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("MapBorderLimit", MapBorderLimit);
		L.RegFunction("ConvertGameToCamera", ConvertGameToCamera);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_nMaxWidth", get_m_nMaxWidth, set_m_nMaxWidth);
		L.RegVar("m_nMaxHeight", get_m_nMaxHeight, set_m_nMaxHeight);
		L.RegVar("MAP_TILEWIDTH", get_MAP_TILEWIDTH, set_MAP_TILEWIDTH);
		L.RegVar("MAP_TILEHEIGHT", get_MAP_TILEHEIGHT, set_MAP_TILEHEIGHT);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapBorderLimit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMap obj = (WorldMap)ToLua.CheckObject(L, 1, typeof(WorldMap));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.MapBorderLimit(ref arg0);
			ToLua.Push(L, arg0);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConvertGameToCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMap obj = (WorldMap)ToLua.CheckObject(L, 1, typeof(WorldMap));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Vector2 o = obj.ConvertGameToCamera(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nMaxWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap obj = (WorldMap)o;
			float ret = obj.m_nMaxWidth;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_nMaxWidth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nMaxHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap obj = (WorldMap)o;
			float ret = obj.m_nMaxHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_nMaxHeight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAP_TILEWIDTH(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap obj = (WorldMap)o;
			float ret = obj.MAP_TILEWIDTH;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MAP_TILEWIDTH on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAP_TILEHEIGHT(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap obj = (WorldMap)o;
			float ret = obj.MAP_TILEHEIGHT;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MAP_TILEHEIGHT on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nMaxWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap obj = (WorldMap)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nMaxWidth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_nMaxWidth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nMaxHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap obj = (WorldMap)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nMaxHeight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_nMaxHeight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAP_TILEWIDTH(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap obj = (WorldMap)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MAP_TILEWIDTH = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MAP_TILEWIDTH on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAP_TILEHEIGHT(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap obj = (WorldMap)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MAP_TILEHEIGHT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MAP_TILEHEIGHT on a nil value" : e.Message);
		}
	}
}

