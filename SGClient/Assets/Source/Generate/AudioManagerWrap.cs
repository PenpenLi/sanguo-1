//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AudioManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AudioManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("Play", Play);
		L.RegFunction("SetAudioSwitch", SetAudioSwitch);
		L.RegFunction("PlayAudio", PlayAudio);
		L.RegFunction("GetAudioClip", GetAudioClip);
		L.RegFunction("GetAudioObject", GetAudioObject);
		L.RegFunction("SetChannelVolume", SetChannelVolume);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnSwitchChanged", get_OnSwitchChanged, set_OnSwitchChanged);
		L.RegVar("MainVoice", get_MainVoice, set_MainVoice);
		L.RegVar("AudioSwitches", get_AudioSwitches, null);
		L.RegVar("AudioRoot", get_AudioRoot, null);
		L.RegFunction("SwitchChanged", AudioManager_SwitchChanged);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AudioManager obj = (AudioManager)ToLua.CheckObject(L, 1, typeof(AudioManager));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AudioManager obj = (AudioManager)ToLua.CheckObject(L, 1, typeof(AudioManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.Play(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAudioSwitch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(AudioManager), typeof(AudioManager.AudioType), typeof(bool)))
			{
				AudioManager obj = (AudioManager)ToLua.ToObject(L, 1);
				AudioManager.AudioType arg0 = (AudioManager.AudioType)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.SetAudioSwitch(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(AudioManager), typeof(int), typeof(bool)))
			{
				AudioManager obj = (AudioManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.SetAudioSwitch(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AudioManager.SetAudioSwitch");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAudio(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(AudioManager), typeof(AudioManager.AudioType), typeof(UnityEngine.AudioClip)))
			{
				AudioManager obj = (AudioManager)ToLua.ToObject(L, 1);
				AudioManager.AudioType arg0 = (AudioManager.AudioType)ToLua.ToObject(L, 2);
				UnityEngine.AudioClip arg1 = (UnityEngine.AudioClip)ToLua.ToObject(L, 3);
				string o = obj.PlayAudio(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(AudioManager), typeof(AudioManager.AudioType), typeof(UnityEngine.AudioClip), typeof(bool)))
			{
				AudioManager obj = (AudioManager)ToLua.ToObject(L, 1);
				AudioManager.AudioType arg0 = (AudioManager.AudioType)ToLua.ToObject(L, 2);
				UnityEngine.AudioClip arg1 = (UnityEngine.AudioClip)ToLua.ToObject(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				string o = obj.PlayAudio(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AudioManager.PlayAudio");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAudioClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AudioManager obj = (AudioManager)ToLua.CheckObject(L, 1, typeof(AudioManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.AudioClip o = obj.GetAudioClip(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAudioObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AudioManager obj = (AudioManager)ToLua.CheckObject(L, 1, typeof(AudioManager));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.GetAudioObject(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetChannelVolume(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(AudioManager), typeof(AudioManager.AudioType), typeof(float)))
			{
				AudioManager obj = (AudioManager)ToLua.ToObject(L, 1);
				AudioManager.AudioType arg0 = (AudioManager.AudioType)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetChannelVolume(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(AudioManager), typeof(int), typeof(float)))
			{
				AudioManager obj = (AudioManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetChannelVolume(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AudioManager.SetChannelVolume");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnSwitchChanged(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AudioManager.OnSwitchChanged);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MainVoice(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AudioManager obj = (AudioManager)o;
			float ret = obj.MainVoice;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MainVoice on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AudioSwitches(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AudioManager obj = (AudioManager)o;
			System.Collections.Generic.Dictionary<AudioManager.AudioType,bool> ret = obj.AudioSwitches;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AudioSwitches on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AudioRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AudioManager obj = (AudioManager)o;
			UnityEngine.Transform ret = obj.AudioRoot;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AudioRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnSwitchChanged(IntPtr L)
	{
		try
		{
			AudioManager.SwitchChanged arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (AudioManager.SwitchChanged)ToLua.CheckObject(L, 2, typeof(AudioManager.SwitchChanged));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(AudioManager.SwitchChanged), func) as AudioManager.SwitchChanged;
			}

			AudioManager.OnSwitchChanged = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MainVoice(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AudioManager obj = (AudioManager)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MainVoice = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MainVoice on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AudioManager_SwitchChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(AudioManager.SwitchChanged), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(AudioManager.SwitchChanged), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

